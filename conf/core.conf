# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="pF8Y_3M_to/l]:c4>41LVELLX=7M8t8A7QDn:00hqVhplp9owiE/Hs?raIhu/xU4"

# The application languages
# ~~~~~
application.langs="en"

#
# Specify the base context
#
#application.context="/ix"

#
# Use this to override the hostname
#
#application.host="https://tripod.nih.gov/"

#
# This parameter should point to a valid version as defined in
# the ix.core.api.routes file!
#
application.api="/api/v1"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global=ix.utils.Global

smtp {
	host=localhost
	#port=25
#	ssl=true
#	user="your_user"
#	password=your_password
	from="your_from_address"
}

#
# inxight setup
# ~~~~~~~~~~~~~~~
ix {
   home = "data.ix"

   # caching config
   cache {
      base = ${ix.home}/cache
      # 1 day
      time = 86400
      maxElements = 50000
      timeToLive = 86400
      timeToIdle = 86400
   }
   
   # text index setup
   text {
      base = ${ix.home}/text
   }

   structure {
      base = ${ix.home}/structure
      # max number to return
      max = 100
      # this is obsoleted!
      renderer = {
         url = "https://tripod.nih.gov/servlet/renderServletv13"
	 format = svg
      }
   }

   # h2
   h2 {
     base = ${ix.home}/h2
   }

   # file storage
   payload {
     base = ${ix.home}/payload
   }
   debug = 1
}

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
application.router=ix.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`

# Set a connection's default isolation level
db.default.isolation=READ_COMMITTED

# In order to reduce lock contention and thus improve performance, 
# each incoming connection request picks off a connection from a 
# pool that has thread-affinity. 
# The higher this number, the better your performance will be for the 
# case when you have plenty of short-lived threads. 
# Beyond a certain threshold, maintenance of these pools will start 
# to have a negative effect on performance (and only for the case 
# when connections on a partition start running out).
db.default.partitionCount=20

# The number of connections to create per partition. Setting this to 
# 5 with 3 partitions means you will have 15 unique connections to the 
# database. Note that BoneCP will not create all these connections in 
# one go but rather start off with minConnectionsPerPartition and 
# gradually increase connections as required.
db.default.maxConnectionsPerPartition=10

# The number of initial connections, per partition.
db.default.minConnectionsPerPartition=5

# When the available connections are about to run out, BoneCP will 
# dynamically create new ones in batches. This property controls 
# how many new connections to create in one go (up to a maximum of 
# maxConnectionsPerPartition). Note: This is a per-partition setting.
db.default.acquireIncrement=1

# After attempting to acquire a connection and failing, try to 
# connect this number of times before giving up.
db.default.acquireRetryAttempts=10

# How long to wait before attempting to obtain a 
# connection again after a failure.
db.default.acquireRetryDelay=5 seconds

# The maximum time to wait before a call 
# to getConnection is timed out.
db.default.connectionTimeout=1 second

# Idle max age
db.default.idleMaxAge=10 minute

# This sets the time for a connection to remain idle before sending a
# test query to the DB. 
# This is useful to prevent a DB from timing out connections on its end. 
db.default.idleConnectionTestPeriod=5 minutes

# An initial SQL statement that is run only when 
# a connection is first created.
db.default.initSQL="SELECT 1 FROM DUAL"

# If enabled, log SQL statements being executed.
db.default.logStatements=false

# The maximum connection age.
db.default.maxConnectionAge=1 hour

# The maximum query execution time. Queries slower than this will be
# logged as a warning.
db.default.queryExecuteTimeLimit=1 second

#
db.default.driver=org.h2.Driver
db.default.url="jdbc:h2:"${ix.h2.base}"/inxight"
db.default.user=sa
db.default.password=""
#db.default.logStatements = true

#db.archive.driver=org.h2.Driver
#db.archive.url="jdbc:h2:data/ct_archive"
#db.archive.user=sa
#db.archive.password=""
#db.archive.jndiName=ArchiveDS

# You can expose this datasource via JNDI if needed (Useful for JPA)
db.default.jndiName=DefaultDS

# Evolutions
# ~~~~~
# You can disable evolutions if needed
#evolutionplugin=disabled

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
#ebean.default="ix.core.adapters.*,ix.core.models.*,ix.ncats.models.*"
#ebean.archive="models.*"

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO
logger.com.jolbox = DEBUG

# Logger provided to your application:
logger.application=DEBUG


#
swagger.api.basepath="http://localhost:9000/inxight"
include "akka.conf"
include "securesocial.conf"
